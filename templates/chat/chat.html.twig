{% extends 'base.html.twig' %}

{% block title %}Hello ChatController!{% endblock %}

{% block body %}
<main class="radient-background">
    <!-- Section de Chat -->
    <section id="chatSection" class="min-h-screen flex-col items-center justify-center px-8 py-8 sm:px-12 lg:col-span-7 lg:px-16 lg:py-12 xl:col-span-6">
        <!-- Ici, vous pouvez ajouter le code pour afficher les messages précédents du chat -->

        <!-- Formulaire pour envoyer une nouvelle réponse -->
        <div class="flex justify-center">
            <div class="w-6/12 overflow-hidden rounded-lg border border-gray-200 shadow-sm focus-within:border-blue-600 focus-within:ring-1 focus-within:ring-blue-600">
                <textarea id="userResponse" class="w-full resize-none border-none align-top focus:ring-0 sm:text-sm" rows="4" placeholder="Votre réponse..."></textarea>
                <div class="flex items-center justify-end gap-2 bg-white p-3">
                    <button id="sendResponse" type="button" class="rounded bg-indigo-600 px-3 py-1.5 text-sm font-medium text-white hover:bg-indigo-700">Envoyer</button>
                </div>
            </div>
        </div>
    </section>
</main>
{# Script pour la gestion de REPONSE #}
<script>
// Sélectionne le bouton et le textarea
const sendButton = document.getElementById('sendResponse');
const userResponse = document.getElementById('userResponse');

function addResponseToChat(responseText, responseType) {
    const responseDiv = document.createElement("div");
    const textContainerDiv = document.createElement("div");

    // style différent selon le type de réponse (utilisateur ou GPT)
    responseDiv.className = responseType === 'user' ? "flex items-start gap-4 my-1" : "flex items-start gap-4 my-1";
    // Créez la div externe pour l'avatar et le texte selon le type de réponse (utilisateur ou GPT)
    const imageElement = document.createElement("img");
    imageElement.src = responseType === 'user' ? "https://cdn.futura-sciences.com/buildsv6/images/wide1920/1/d/8/1d8a8e8fe1_109430_chouette-hibou-difference.jpg" : "https://funny-photo.s3.amazonaws.com/preview/half_robot_face_mask/robot-face-photo-effect.jpg"; // Utilisez des liens d'image appropriés
    imageElement.alt = responseType === 'user' ? "Avatar de l'utilisateur" : "Avatar de GPT";
    imageElement.className = "size-20 rounded-lg object-cover";
    
    // Ajoutez l'élément img à la div externe
    responseDiv.appendChild(imageElement);

    // Créez et configurez le h3 pour le nom du personnage
    const characterName = document.createElement("h3");
    characterName.className = "text-lg font-medium text-gray-900";
    characterName.textContent = responseType === 'user' ? "Utilisateur" : "GPT"; // Changez cela selon votre besoin
    // Ajoutez le h3 à la div de texte
    textContainerDiv.appendChild(characterName);

    const responseContent = document.createElement("p");
    responseContent.className = "mt-0.5 text-gray-700";
    responseContent.textContent = responseText;
    textContainerDiv.appendChild(responseContent);


    // Ajoutez le paragraphe à la div de texte
    responseDiv.appendChild(textContainerDiv);

    // Sélectionnez l'élément après lequel vous souhaitez insérer le nouveau div
    const referenceElement = document.getElementById('chatSection'); // Assurez-vous que cet ID existe

    // Insérez le nouveau div après l'élément de référence
    referenceElement.appendChild(responseDiv);

}
sendButton.addEventListener('click', function() {
    const responseText = userResponse.value.trim(); // Assurez-vous que la réponse n'est pas juste des espaces blancs
    if (responseText === '') {
        // Ne rien faire si la réponse de l'utilisateur est vide
        return;
    }
    addResponseToChat(responseText, 'user'); // Affiche immédiatement la réponse de l'utilisateur dans le chat
    userResponse.value = ''; // Efface le texte de l'utilisateur

    let formData = new FormData();
    formData.append('response', responseText);
    const chatId = '{{ chatId }}'; 
    const url = `/handle-chat-interaction/${chatId}`;

    fetch(url, { 
        method: 'POST',
        body: formData
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        return response.json();
    })
    .then(data => {
        
        if (data && data.responseFromApi) {
            addResponseToChat(data.responseFromApi, 'gpt'); // Ajoute la réponse de GPT
        }
    })
    .catch(error => {
        console.error('Error:', error);
        // Ici, affiche l'erreur à l'utilisateur au lieu de simplement l'enregistrer dans la console
    });
});

/* pour afficher l'historique des messages */
const messages = {{ messages|json_encode|raw }};
messages.forEach(message => {
    addResponseToChat(message.content, message.role);
});
</script>
{% endblock %}
