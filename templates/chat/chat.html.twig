{% extends 'base.html.twig' %}

{% block title %}Hello ChatController!{% endblock %}

{% block body %}
<div id="limitModal" class="fixed inset-0 bg-transparent backdrop-blur-sm items-center justify-center hidden z-50 w-full h-full top-0">
    <div class="modal-content bg-white p-5 rounded-lg max-w-sm mx-auto text-gray-900">
        <div class="modal-header flex justify-between items-center">
            <h2 class="text-2xl font-bold">Limite atteinte</h2>
            <button class="close text-2xl font-semibold" data-dismiss="modal">&times;</button>
        </div>
        <div class="modal-body my-4">
            <p id="limitWarning" class="text-base">Vous avez atteint votre limite de messages gratuits.</p>
        </div>
        <div class="modal-footer flex justify-end">
            <button id="closeLimitModal" class="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-700 transition duration-150" data-dismiss="modal">Fermer</button>
        </div>
    </div>
</div>


    <!-- Bouton pour déclencher le résumé -->
    {% if chat.story is not empty %}
    <button id="toggleModalButton"   class="relative inline-block px-4 py-2 font-medium group">
        <span class="absolute inset-0 w-full h-full transition duration-200 ease-out transform translate-x-1 translate-y-1 bg-black group-hover:-translate-x-0 group-hover:-translate-y-0"></span>
        <span class="absolute inset-0 w-full h-full bg-white border-2 border-black group-hover:bg-black"></span>
        <span class="relative text-black group-hover:text-white">Afficher l'histoire</span>
    </button>
    {% else %}
    <button id="summarizeChatBtn" data-chat-id="{{ chat.id }}" class="relative px-5 py-3 overflow-hidden font-medium text-gray-600 bg-gray-100 border border-gray-100 rounded-lg shadow-inner group">
        <span class="absolute top-0 left-0 w-0 h-0 transition-all duration-200 border-t-2 border-gray-600 group-hover:w-full ease"></span>
        <span class="absolute bottom-0 right-0 w-0 h-0 transition-all duration-200 border-b-2 border-gray-600 group-hover:w-full ease"></span>
        <span class="absolute top-0 left-0 w-full h-0 transition-all duration-300 delay-200 bg-gray-600 group-hover:h-full ease"></span>
        <span class="absolute bottom-0 left-0 w-full h-0 transition-all duration-300 delay-200 bg-gray-600 group-hover:h-full ease"></span>
        <span class="absolute inset-0 w-full h-full duration-300 delay-300 bg-gray-900 opacity-0 group-hover:opacity-100"></span>
        <span  class="relative transition-colors duration-300 delay-200 group-hover:text-white ease">Ecris ton histoire!</span>
    </button>
    {% endif %}


    <!-- Zone pour afficher le résumé -->
    <div id="summaryModal" tabindex="-1" aria-hidden="true" class="summarize-modal hidden overflow-y-auto overflow-x-hidden fixed top-0 right-0 left-0 z-50 justify-center items-center w-full md:inset-0 h-[calc(100%-1rem)] max-h-full">
        <div class="relative p-4 w-full max-w-2xl max-h-full">
            <!-- Modal content -->
            <div id="summaryModalContent" class="relative bg-white rounded-lg shadow dark:bg-g-violet">
                <!-- Modal header -->
                <div class="flex items-center justify-between p-4 md:p-5 border-b rounded-t dark:border-gray-600">
                    <h3 class="text-xl font-semibold text-gray-900 dark:text-white">
                        Résumé du Chat
                    </h3>
                    <button id="hideModalBtn" class="px-2 py-1 rounded bg-red-500 text-gray-900 hover:bg-red-400 hover:text-g-violet ">X</button>
                </div>
                    <!-- Modal body -->
                <div class="p-4 md:p-5 space-y-4">
                    <p id="chatSummary" class="text-base leading-relaxed text-gray-500 dark:text-gray-400">
                    {% if chat.story is not empty %}
                        {{ chat.story }}
                    {% else %}
                        Aucun résumé n'est disponible pour le moment.
                    {% endif %}
                    </p>
                </div>
            </div>
        </div>
    </div>

    <!-- Section de Chat -->
    <section id="chatSection" class="max-h-screen flex flex-col items-start justify-center px-8 sm:px-12">
        <!-- Ici, vous pouvez ajouter le code pour afficher les messages précédents du chat -->
        <div id="responseSection" class=" overflow-scroll hide-scrollbar"></div>
        <!-- Formulaire pour envoyer une nouvelle réponse -->
        <div class="flex justify-center order-1 w-full">
            <div class="w-6/12 overflow-hidden rounded-lg border border-gray-200 shadow-sm focus-within:border-blue-600 focus-within:ring-1 focus-within:ring-blue-600">
                <textarea id="userResponse" class="w-full resize-none border-none align-top focus:ring-0 sm:text-sm" rows="4" placeholder="Votre réponse..."></textarea>
                <div class="flex items-center justify-end gap-2 bg-white p-3">
                    <button id="sendResponse" type="button" class="rounded bg-indigo-600 px-3 py-1.5 text-sm font-medium text-white hover:bg-indigo-700">Envoyer</button>
                </div>
            </div>
        </div>
    </section>

{# Script pour la gestion de REPONSE #}
<script>
// Sélectionne le bouton et le textarea
const sendButton = document.getElementById('sendResponse');
const userResponse = document.getElementById('userResponse');
const chatStory = '{{ chat.story | escape('js') }}'; // Assure-toi d'échapper le contenu pour JavaScript


function addResponseToChat(responseText, responseType) {
    const responseDiv = document.createElement("div");
    const textContainerDiv = document.createElement("div");

    // style différent selon le type de réponse (utilisateur ou GPT)
    responseDiv.className = responseType === 'user' ? "flex items-start gap-4 my-1" : "flex items-start gap-4 my-1";
    // Créez la div externe pour l'avatar et le texte selon le type de réponse (utilisateur ou GPT)
    const imageElement = document.createElement("img");
    imageElement.src = responseType === 'user' ? "https://cdn.futura-sciences.com/buildsv6/images/wide1920/1/d/8/1d8a8e8fe1_109430_chouette-hibou-difference.jpg" : "https://funny-photo.s3.amazonaws.com/preview/half_robot_face_mask/robot-face-photo-effect.jpg"; // Utilisez des liens d'image appropriés
    imageElement.alt = responseType === 'user' ? "Avatar de l'utilisateur" : "Avatar de GPT";
    imageElement.className = "size-20 rounded-lg object-cover";
    
    // Ajoutez l'élément img à la div externe
    responseDiv.appendChild(imageElement);

    // Créez et configurez le h3 pour le nom du personnage
    const characterName = document.createElement("h3");
    characterName.className = "text-lg font-medium text-gray-900";
    characterName.textContent = responseType === 'user' ? "Utilisateur" : "GPT"; // Changez cela selon votre besoin
    // Ajoutez le h3 à la div de texte
    textContainerDiv.appendChild(characterName);

    const responseContent = document.createElement("p");
    responseContent.className = "mt-0.5 text-g-violet";
    responseContent.textContent = responseText;
    textContainerDiv.appendChild(responseContent);


    // Ajoutez le paragraphe à la div de texte
    responseDiv.appendChild(textContainerDiv);

    // Sélectionnez l'élément après lequel vous souhaitez insérer le nouveau div
    const referenceElement = document.getElementById('responseSection'); // Assurez-vous que cet ID existe

    // Insérez le nouveau div après l'élément de référence
    referenceElement.appendChild(responseDiv);

}
sendButton.addEventListener('click', function() {
    const responseText = userResponse.value.trim(); // Assurez-vous que la réponse n'est pas juste des espaces blancs
    if (responseText === '') {
        // Ne rien faire si la réponse de l'utilisateur est vide
        return;
    }
    addResponseToChat(responseText, 'user'); // Affiche immédiatement la réponse de l'utilisateur dans le chat
    userResponse.value = ''; // Efface le texte de l'utilisateur
    // scroll vers le bas
    scrollToBottom();

    let formData = new FormData();
    formData.append('response', responseText);
    const chatId = '{{ chatId }}'; 
    const url = `/handle-chat-interaction/${chatId}`;

    fetch(url, { 
        method: 'POST',
        body: formData
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        return response.json();
    })
    .then(data => {
        if (data.success === false) {
        // Affiche la fenêtre modale d'avertissement si l'utilisateur a atteint la limite
        displayLimitModal(data.warning); // Affiche une fenêtre modale avec le message d'avertissement
        }else if
        (data && data.responseFromApi) {
            addResponseToChat(data.responseFromApi, 'gpt'); // Ajoute la réponse de GPT
            // scroll vers le bas
            scrollToBottom();
        }
    })
    .catch(error => {
        console.error('Error:', error);
        // Ici, affiche l'erreur à l'utilisateur au lieu de simplement l'enregistrer dans la console
    });
});

/* pour afficher l'historique des messages */
const messages = {{ messages|json_encode|raw }};
messages.forEach(message => {
    addResponseToChat(message.content, message.role);
});
</script>

{# Pour récupérer le résumé #}
<script>
    const summaryModal = document.getElementById('summaryModal');
    const summaryModalContent = document.getElementById('summaryModalContent');
    const toggleModalButton = document.getElementById('toggleModalButton');  
    const summarizeChatBtn = document.getElementById('summarizeChatBtn'); 

    // Fonction pour basculer l'affichage de la modal
// Fonction pour basculer l'affichage de la modal
    function toggleModal() {
        const chatSummaryContainer = document.getElementById('chatSummary');
        if (summaryModal.classList.contains('hidden')) {
            console.log('summaryModal is hidden');
            summaryModal.classList.remove('hidden');
            summaryModal.classList.add('flex');
            // Écouteur d'événements pour les clics à l'extérieur de la modal
            // chatSummaryContainer pourrait contenir un texte par défaut ou le dernier résumé
        } else {
            window.addEventListener('click', function(event) {
                if (summaryModal && summaryModalContent && !summaryModalContent.contains(event.target) && !summaryModal.classList.contains('hidden')) {
                    toggleModal();
                }
            });
            console.log('summaryModal is not hidden');
            if (summaryModal) {
                summaryModal.classList.add('hidden');
                summaryModal.classList.remove('flex');
                if (toggleModalButton) toggleModalButton.textContent = "Afficher l'histoire résumé"; // Vérifier si le bouton existe
            }
        }
    }

    if (toggleModalButton){
    toggleModalButton.addEventListener('click', toggleModal); // Ajoute un écouteur d'événements seulement si le bouton existe
    }

    // Lorsque le bouton pour générer le résumé est cliqué
    if (summarizeChatBtn) {
        summarizeChatBtn.addEventListener('click', function() {
            var chatId = this.getAttribute('data-chat-id');
            var url = '/summarize-chat/' + chatId; // Construire l'URL pour la requête AJAX

            // Effectuer la requête AJAX
            fetch(url, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest',
                }
            }).then(response => response.json())
              .then(data => {
                  if (data.success && summaryModal) {
                      const chatSummaryContainer = document.getElementById('chatSummary')
                      chatSummaryContainer.textContent = data.summarizedStory;
                      summaryModal.classList.remove('hidden');
                      summaryModal.classList.add('flex');
                  } else {
                      document.getElementById('chatSummary').textContent = 'Erreur: ' + data.error;
                  }
              })
              .catch(error => {
                  document.getElementById('chatSummary').textContent = 'Erreur lors de la récupération du résumé';
              });
        });
    }
</script>
<script>
// Fonction pour afficher la fenêtre modale d'avertissement
function displayLimitModal(warningMessage) {
     // Définit le message d'avertissement dans la modale
    document.getElementById('limitWarning').textContent = warningMessage;

    // Affiche la fenêtre modale avec Tailwind
    var limitModal = document.getElementById('limitModal');
    limitModal.classList.remove('hidden'); // Utilise Tailwind pour rendre la modale visible
    limitModal.classList.add('flex', 'items-center', 'justify-center'); // Centrer la modale

    // Obtient l'élément qui ferme la fenêtre limitModale
    var closeBtn = limitModal.querySelector('[data-dismiss="limitModal"]');

    // Quand l'utilisateur clique sur <span> (x), ferme la fenêtre limitModale
    closeBtn.onclick = function() {
        limitModal.classList.add('hidden'); // Utilise Tailwind pour cacher la modale
        limitModal.classList.remove('flex', 'items-center', 'justify-center'); // Enlève les classes pour le centrage
    }

    // Quand l'utilisateur clique n'importe où en dehors de la fenêtre limitModale, elle se ferme
    window.onclick = function(event) {
        if (event.target == limitModal) {
            limitModal.classList.add('hidden');
            limitModal.classList.remove('flex', 'items-center', 'justify-center');
        }
    }
}

// Gestion de la fermeture de la fenêtre limitModale
const limitModal = document.getElementById('limitModal');
function closeLimitModal() {
    if (limitModal.classList.contains('flex')) {
        limitModal.classList.remove('flex');
        limitModal.classList.add('hidden');
    }
}
limitModal.addEventListener('click', closeLimitModal);


// function pour scroll en bas
function scrollToBottom() {
    const chatContainer = document.getElementById('responseSection');
    chatContainer.scrollTop = chatContainer.scrollHeight;
}
// Faire défiler vers le bas lorsque la page charge
document.addEventListener('DOMContentLoaded', scrollToBottom);
</script>
{% endblock %}
