{% extends 'base.html.twig' %}

{% block title %}Hello AppController!{% endblock %}

{% block body %}
<main class="radient-background">
<h1 class="bg-red-500 w-full text-7xl"></h1>
                
    {# <div class="flex justify-center"> #}
        <section id="formSection" class="min-h-screen flex items-center justify-center px-8 py-8 sm:px-12 lg:col-span-7 lg:px-16 lg:py-12 xl:col-span-6">
            <div class="max-w-xl lg:max-w-3xl">

            {{ form_start(form, {
                attr: {
                    'id': 'my-form',
                    'class': 'w-full h-full',
                    }
                })
            }}

                <div class="col-span-6">
                    {{ form_row(form.characterName, {
                    attr: {
                        'class': 'p-2 mt-1 w-full rounded-md border-gray-200 bg-white text-sm text-gray-700 shadow-sm'
                        },
                    label_attr: {'class': 'mt-2 block text-sm font-medium text-gray-700'},
                    }) }}
                </div>

                {# <div class="col-span-6 sm:col-span-3">
                    {{ form_row(form.genreNames, {
                    attr: {'class': 'p-2 mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50'},
                    label_attr: {'class': 'mt-2 block text-sm font-medium text-gray-700'},
                    }) }}
                </div> #}
            
                <div class="mt-4 col-span-6 grid grid-cols-3 gap-4">
                {# Itération sur chaque choix pour genreNames #}
                {% for genreName in form.genreNames %}
                    <div class="flex items-center">
                        {# Rendu de la case à cocher avec les classes Tailwind #}
                        {{ form_widget(genreName, {
                            'attr': {'class': 'h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded'}
                        }) }}
                        {# Rendu du label avec les classes Tailwind #}
                        {{ form_label(genreName, null, {
                            'label_attr': {'class': 'ml-2 block text-sm text-gray-900'}
                        }) }}
                    </div>
                {% endfor %}
                </div>
                {{ form_errors(form.genreNames) }}



                <div class="col-span-6 sm:col-span-3">
                    {{ form_row(form.authorName, {
                    attr: {'class': 'p-2 mt-1 w-full rounded-md border-gray-200 bg-white text-sm text-gray-700 shadow-sm'},
                    label_attr: {'class': 'mt-2 block text-sm font-medium text-gray-700'},
                    }) }}
                </div>

                <div class="col-span-6 sm:col-span-3">
                    {{ form_row(form.wordsCount, {
                    attr: {'class': 'p-2 mt-1 w-full rounded-md border-gray-200 bg-white text-sm text-gray-700 shadow-sm'},
                    label_attr: {'class': 'mt-2 block text-sm font-medium text-gray-700'},
                    }) }}
                </div>

                <div class="col-span-6 sm:col-span-3">
                    {{ form_row(form.languageName, {
                    attr: {'class': 'p-2 mt-1 w-full rounded-md border-gray-200 bg-white text-sm text-gray-700 shadow-sm'},
                    label_attr: {'class': 'mt-2 block text-sm font-medium text-gray-700'},
                    }) }}
                </div>




                        <div class="mt-6 col-span-6 sm:col-span-3 flex justify-center">
                        
                        {{ form_row(form.submit, {
                            attr: {'class': 'mt-2 inline-block shrink-0 rounded-md border border-cambridge-blue bg-cambridge-blue px-12 py-3 text-sm font-medium text-white transition hover:bg-transparent hover:text-cambridge-blue focus:outline-none focus:ring active:text-blue-500'},
                        }) }}
                    </div>
                {{ form_end(form)}}
            </div>
        </div>
    </section>

    <section id="chatSection"  class="min-h-screen flex-col items-center justify-center px-8 py-8 sm:px-12 lg:col-span-7 lg:px-16 lg:py-12 xl:col-span-6" style="display: none">
        <div class="flex items-start gap-4" id="gptOutputsDiv">
            <img
                src="https://funny-photo.s3.amazonaws.com/preview/half_robot_face_mask/robot-face-photo-effect.jpg"
                alt=""
                class="size-20 rounded-lg object-cover"
            />

            <div>
                <h3 class="text-lg/tight font-medium text-gray-900">Maitre du jeu</h3>

                <p class="mt-0.5 text-gray-700" id="gptOutputs">
                {# GPT outputs heres #}
                </p>
            </div>
        </div>
        

        {# user input FORM #}
        <div class="flex justify-center">
            <div class="w-6/12 overflow-hidden rounded-lg border border-gray-200 shadow-sm focus-within:border-blue-600 focus-within:ring-1 focus-within:ring-blue-600">
                <textarea id="userResponse" class="w-full resize-none border-none align-top focus:ring-0 sm:text-sm" rows="4" placeholder="Enter any additional order notes..."></textarea>
                <div class="flex items-center justify-end gap-2 bg-white p-3">
                    <button id="sendResponse" type="button" class="rounded bg-indigo-600 px-3 py-1.5 text-sm font-medium text-white hover:bg-indigo-700">Add</button>
                </div>
            </div>
        </div>
    </section>
    
</main>

{# Script pour la gestion de la création SCENARIO #}
<script>
let chatId; // Stocke l'ID du chat pour l'utiliser dans la requête de réponse
    document.addEventListener('DOMContentLoaded', function () {
        const form = document.getElementById('my-form'); 
        form.addEventListener('submit', function (event) {
            event.preventDefault();
            const formData = new FormData(form);

            fetch(form.action, {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                },
            })
            .then(response => response.json())
            .then(data => {
                // si on reçoit bien la reponse
                if (data.success) {
                    chatId = data.chatId;
                    // faire disparaître le formulaire
                    const formSection = document.getElementById('formSection');
                    // effet de transition immédiat
                    formSection.classList.add('fade-out');
                    // Après 1s
                    setTimeout(() => {
                        // Cacher après la transition
                        formSection.style.display = 'none'; 
                        formSection.classList.remove('flex');
                        // insérer la réponse
                        const chatSection = document.getElementById('chatSection');
                        const gptOutputs = document.getElementById('gptOutputs');
                        gptOutputs.innerHTML = data.gptResponse;
                        chatSection.classList.add('fade-in');
                        chatSection.style.display = 'block';
                        chatSection.style.opacity = 0;
                        setTimeout(() => chatSection.style.opacity = 1, 10); // Léger délai pour commencer la transition
                    }, 1000)
                    } else {
                    // Handle failure
                    console.error('Form submission failed', data);
                }
            })
            .catch(error => {
                console.error('Error:', error);
            });
        });
    });
</script>

{# Script pour la gestion de REPONSE #}
<script>
// Sélectionne le bouton et le textarea
const sendButton = document.getElementById('sendResponse');
const userResponse = document.getElementById('userResponse');

function addResponseToChat(responseText, responseType) {
    const responseDiv = document.createElement("div");
    const textContainerDiv = document.createElement("div");

    // style différent selon le type de réponse (utilisateur ou GPT)
    responseDiv.className = responseType === 'user' ? "flex items-start gap-4 my-1" : "flex items-start gap-4 my-1";
    // Créez la div externe pour l'avatar et le texte selon le type de réponse (utilisateur ou GPT)
    const imageElement = document.createElement("img");
    imageElement.src = responseType === 'user' ? "https://cdn.futura-sciences.com/buildsv6/images/wide1920/1/d/8/1d8a8e8fe1_109430_chouette-hibou-difference.jpg" : "https://funny-photo.s3.amazonaws.com/preview/half_robot_face_mask/robot-face-photo-effect.jpg"; // Utilisez des liens d'image appropriés
    imageElement.alt = responseType === 'user' ? "Avatar de l'utilisateur" : "Avatar de GPT";
    imageElement.className = "size-20 rounded-lg object-cover";
    
    // Ajoutez l'élément img à la div externe
    responseDiv.appendChild(imageElement);

    // Créez et configurez le h3 pour le nom du personnage
    const characterName = document.createElement("h3");
    characterName.className = "text-lg font-medium text-gray-900";
    characterName.textContent = responseType === 'user' ? "Utilisateur" : "GPT"; // Changez cela selon votre besoin
    // Ajoutez le h3 à la div de texte
    textContainerDiv.appendChild(characterName);

    const responseContent = document.createElement("p");
    responseContent.className = "mt-0.5 text-gray-700";
    responseContent.textContent = responseText;
    textContainerDiv.appendChild(responseContent);


    // Ajoutez le paragraphe à la div de texte
    responseDiv.appendChild(textContainerDiv);

    // Sélectionnez l'élément après lequel vous souhaitez insérer le nouveau div
    const referenceElement = document.getElementById('chatSection'); // Assurez-vous que cet ID existe

    // Insérez le nouveau div après l'élément de référence
    referenceElement.appendChild(responseDiv);

}
sendButton.addEventListener('click', function() {
    const responseText = userResponse.value;
    let formData = new FormData();

    formData.append('response', responseText);

    const url = `/handle-chat-interaction/${chatId}`;

    fetch(url, { 
        method: 'POST',
        body: formData
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        return response.json();
    })
    .then(data => {
        console.log(data);
        // Assurez-vous que 'data' contient la réponse de l'API sous une forme que vous pouvez utiliser
        addResponseToChat(userResponse.value, 'user'); // Ajoute la réponse de l'utilisateur
        console.log(userResponse.value);
        if (data && data.responseFromApi) {
            console.log(data.responseFromApi);
            addResponseToChat(data.responseFromApi, 'gpt'); // Ajoute la réponse de GPT
        }
    })
    .catch(error => {
        console.error('Error:', error);
        // Ici, affiche l'erreur à l'utilisateur au lieu de simplement l'enregistrer dans la console
    });
});
</script>
{% endblock %}
